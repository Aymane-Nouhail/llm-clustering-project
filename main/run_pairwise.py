import numpy as np
import os
import pandas as pd # Import pandas (needed because the called function uses it)
# Need f1_score and linear_sum_assignment imports as the called function uses them
# It's good practice to import them here as well, although not strictly necessary
# if they are only used inside calculate_clustering_metrics within the other file.
# from sklearn.metrics import f1_score
# from scipy.optimize import linear_sum_assignment

# Import modules from src
from src.config import (
    OPENAI_API_KEY, DATA_CACHE_PATH, DEFAULT_N_CLUSTERS,
    PC_PROMPT_TEMPLATE, PC_NUM_PAIRS_TO_QUERY, PC_CONSTRAINT_SELECTION_STRATEGY
)
from src.data import load_dataset
from src.llm_service import LLMService
# Import the updated function from src
from src.clustering_methods.pairwise_constraints import cluster_via_pairwise_constraints
# Import evaluation utility (assuming it's from few_shot_clustering)
from few_shot_clustering.eval_utils import cluster_acc
from active_semi_clustering.semi_supervised.pairwise_constraints import PCKMeans



def run_pairwise_constraints_experiment(dataset_name):
    print("\n--- Running Pairwise Constraints Experiment ---")
    # --- Configuration and Setup ---
    api_key = OPENAI_API_KEY # Get API key from config (loads from env)
    llm_service = LLMService(api_key) # Creates LLMService instance or it raises
    # Get the embedding model instance from the service to pass to data loading
    embedding_model_instance = llm_service.get_embedding_model()
    # --- Load Data ---
    print("\nLoading data and embeddings...")
    # Pass the embedding model to load_dataset for consistent embeddings
    features, labels, documents = load_dataset(dataset_name, cache_path=DATA_CACHE_PATH, embedding_model=embedding_model_instance, max_samples_per_class=500)

    # Ensure labels are numpy array for scikit-learn metrics
    labels_np = np.array(labels)

    # Determine the number of clusters from the true labels
    n_clusters = len(np.unique(labels_np))
    print(f"Target number of clusters (from true labels): {n_clusters}")

    # --- Run LLM Method 2: Pairwise Constraints ---
    print(f"\nRunning Method 2: Pairwise Constraints...")
    # Define the desired CSV output path for pairwise queries generated by this method
    PAIRWISE_QUERIES_CSV = dataset_name + "_pairwise_queries_output.csv"
    # Pass the true labels (labels_np) and the query output path explicitly to the function
    pairwise_assignments = cluster_via_pairwise_constraints(
        dataset_name, documents, features, labels_np, n_clusters, llm_service, # Pass labels_np, llm_service instance
        PC_PROMPT_TEMPLATE,
        num_pairs_to_query=PC_NUM_PAIRS_TO_QUERY,
        constraint_selection_strategy=PC_CONSTRAINT_SELECTION_STRATEGY,
        pairwise_queries_output_csv_path=PAIRWISE_QUERIES_CSV # Pass the path here
    )

    # --- Report Final Status (Metrics saved internally) ---
    if pairwise_assignments is not None:
        print("\nPairwise Constraints method completed. Metrics and queries saved to CSV.")
    else:
        print("\nPairwise Constraints method failed or skipped. Status saved to CSV.")


if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1:
        dataset_name = sys.argv[1]
        run_pairwise_constraints_experiment(dataset_name)
    else:
        run_pairwise_constraints_experiment("tweet")